<tool id="interactive_tool_jupyter_##PLACEHOLDERSHORTNAME##" tool_type="interactive" name="##PLACEHOLDERLONGNAME##" version="0.2">
    <requirements>
        <container type="docker">##PLACEHOLDERCONTAINER##</container>
    </requirements>
    <entry_points>
        <entry_point name="Jupyter - ##PLACEHOLDERSHORTNAME##" requires_domain="True">
            <port>8888</port>
            <url>ipython/lab</url>
            <url>ipython/lab</url>
        </entry_point>
    </entry_points>
    <environment_variables>
        <environment_variable name="HISTORY_ID">$__history_id__</environment_variable>
        <environment_variable name="REMOTE_HOST">$__galaxy_url__</environment_variable>
        <environment_variable name="GALAXY_WEB_PORT">8080</environment_variable>
        <environment_variable name="GALAXY_URL">$__galaxy_url__</environment_variable>
        <environment_variable name="API_KEY" inject="api_key" />
    </environment_variables>
    <command detect_errors="aggressive"><![CDATA[
        #import re
        export GALAXY_WORKING_DIR=`pwd` &&
        mkdir -p ./jupyter/outputs/ &&
        mkdir -p ./jupyter/data && mkdir -p ./jupyter/notebooks && REPONAME=$(cat /home/jovyan/gitrepo | awk -F'/' '{print $NF}'); mv /home/jovyan/$REPONAME ./jupyter/$REPONAME && Rscript -e 'IRkernel::installspec(user = FALSE);' &&


        #for $count, $file in enumerate($input):
            #set $cleaned_name = str($count + 1) + '_' + re.sub('[^\w\-\.\s]', '_', str($file.element_identifier))
            ln -sf '$file' './jupyter/data/${cleaned_name}.${file.ext}' &&
        #end for

        ## change into the directory where the notebooks are located
        cd ./jupyter/ &&
        export HOME=/home/jovyan/ &&
        export PATH=/home/jovyan/.local/bin:\$PATH &&

        cp '$__tool_directory__/default_notebook.ipynb' ./galaxy_instructions.ipynb &&
        ls ./jupyter/notebook/autogenerated/quarto/* | grep ".ipynb" | xargs -i jupyter trust {} &&
        jupyter lab --allow-root --no-browser --NotebookApp.shutdown_button=True &&
        ls ./jupyter/notebook/autogenerated/quarto/* | grep ".ipynb" | head | xargs -i cp ./YESCDS/inst/ipynb/{} '$jupyter_notebook'
    ]]>
    </command>
    <outputs>
        <data name="jupyter_notebook" format="ipynb" label="##PLACEHOLDERLONGNAME##"></data>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <param name="mode" value="previous" />
            <param name="ipynb" value="test.ipynb" />
            <param name="run_it" value="true" />
            <output name="jupyter_notebook" file="test.ipynb" ftype="ipynb"/>
        </test>
    </tests>
    <help>
    The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations,
    visualizations and narrative text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, data visualization,
    machine learning, and much more.

    Galaxy offers you to use Jupyter Notebooks directly in Galaxy accessing and interacting with Galaxy datasets as you like. A very common use-case is to
    do the heavy lifting and data reduction steps in Galaxy and the plotting and more `interactive` part on smaller datasets in Jupyter.

    You can start with a new Jupyter notebook from scratch or load an already existing one, e.g. from your colleague and execute it on your dataset.
    If you have a defined input dataset you can even execute a Jupyter notebook in a workflow, given that the notebook is writing the output back to the history.

    You can import data into the notebook via a predefined `get()` function and write results back to Galaxy with a `put()` function.
    </help>
</tool>